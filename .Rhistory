add_trace(x = ~Date, y = ~round(I),
line = list(color = "red"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Infected Projected: ", round(I), "<br>"),
showlegend = TRUE,
name = "Infected Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(I*5),
line = list(color = "green"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Total Cases Projected: ", round(I*5), "<br>"),
showlegend = TRUE,
name = "Total Cases Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(R),
line = list(color = "orange"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Recovered Projected: ", round(R), "<br>"),
showlegend = TRUE,
name = "Recovered Projected",
data = fitted_cumulative_incidence
) %>%
layout(xaxis = list(title = ""),
yaxis = list(title = "Persons (log)", type = "log",
tickformat=",d"),
title="COVID-19 fitted (log) vs observed possitive cases in Peru (molecular test model)" )
# fitted_cumulative_incidence %>%
#   mutate(Deaths = round(I*0.2)) %>%
#   ggplot(aes(x=Date)) +
#   geom_line(aes(y=I, colour="red")) +
#   geom_line(aes(y=S, colour="black")) +
#   geom_line(aes(y=R, colour="green")) +
#   geom_line(aes(y=Deaths), colour="brown") +
#   geom_point(aes(y=cumulative_incident_cases, colour="blue")) +
#   scale_y_log10(labels = scales::comma) +
#   labs(y="Persons",
#        title="COVID-19 fitted vs observed cumulative incidence, Peru") +
#   scale_colour_manual(name = '',
#                       values =c('red' = 'red', 'black' = 'black', 'green' = 'green',
#                                 'brown' = 'brown', 'blue' = 'blue'),
#                       labels = c('Susceptible', 'Observed incidence', 'Recovered', 'Infectious', 'Deaths')) +
#   theme_bw() + theme(legend.position = "right")
Opt <- optim(optimsstart, RSS, method = "L-BFGS-B",
lower = lower, upper = upper,
hessian = TRUE)
# check for convergence
Opt$message
sigest <- sqrt(Opt$value/(length(Infected)-1))
solve(1/(2*sigest^2)*Opt$hessian)
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
R0 <- setNames(Opt_par["beta"] / Opt_par["gamma"], "R0")
R0
g <- fitted_cumulative_incidence %>%
mutate(I = round(I)) %>%
ggplot(aes(x=Date)) +
geom_line(aes(y=I), colour="darkred") +
geom_point(aes(y=cumulative_incident_cases), colour="blue") +
scale_y_continuous(labels = scales::comma) +
labs(y="Cumulative incidence",
title="COVID-19 Fitted vs Observed Cumulative Cases in Peru",
subtitle="(red = fitted incidence from SIR model, blue = observed incidence)") +
theme_bw()
ggplotly(g)
# time in days for predictions - 100 days
t <- 1:100
# get the fitted values from our SIR model 1.846830e+05
fitted_cumulative_incidence <- data.frame(ode(y = init, times = t,
func = SIR, parms = Opt_par))
# add a Date column and join the observed incidence data
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
mutate(Date = ymd(sir_start_date) + days(t-1),
province="Peru_cases_increase") %>%
mutate(I = round(I)) %>%
left_join(Peru_Cumulative_Incidence %>%
ungroup() %>%
filter(province=="Peru_cases_increase") %>%
select(Date, cumulative_incident_cases)) %>%
left_join(COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(is.na(Deaths_Total), 0, Deaths_Total)) %>%
select(Date, Deaths_Total))
# plot the data
# h <- fitted_cumulative_incidence %>%
#   mutate(Deaths = round(I*0.2)) %>%
#   ggplot(aes(x=Date)) +
#   geom_line(aes(y=I), colour="red") +
#   geom_line(aes(y=S), colour="black") +
#   geom_line(aes(y=R), colour="green") +
#   geom_line(aes(y=Deaths), colour="brown") +
#   geom_point(aes(y=cumulative_incident_cases), colour="blue") +
#   scale_y_continuous(labels = scales::comma) +
#   labs(y="Persons",
#        title="COVID-19 fitted vs observed cumulative incidence, Peru",
#        subtitle="(red = Infectious, black = Susceptible, green = Recovered, blue = Observed incidence") +
#   # scale_colour_manual(name = '',
#   #                     values =c('orange' = 'orange', 'red'='red', 'black'='black', 'green'='green', 'blue'='blue'),
#   #                     labels = c('Susceptible', 'Recovered', 'Observed incidence', 'Infectious')) +
#   theme_bw()
#
# ggplotly(h)
plot_ly(type = "scatter", mode = "lines") %>%
add_trace(x = ~Date, y = ~S,
line = list(color = "black"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Susceptible Projected: ", round(S), "<br>"),
showlegend = TRUE,
name = "Susceptible Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~cumulative_incident_cases,
mode = "marker",
marker = list(color = "blue"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Symptomatic Cases Observed: ", cumulative_incident_cases, "<br>"),
showlegend = TRUE,
name = "Symptomatic Cases Observed",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~Deaths_Total,
mode = "marker",
marker = list(color = "brown"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Deaths Observed: ", Deaths_Total, "<br>"),
showlegend = TRUE,
name = "Deaths Observed",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(I),
line = list(color = "red"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Sympomatic Cases Projected: ", round(I), "<br>"),
showlegend = TRUE,
name = "Symptomatic Cases Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(I*5),
line = list(color = "green"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Total Cases Projected: ", round(I*5), "<br>"),
showlegend = TRUE,
name = "Total Cases Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(R),
line = list(color = "orange"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Symptomatic Recovered Projected: ", round(R), "<br>"),
showlegend = TRUE,
name = "Symptomatic Recovered Projected",
data = fitted_cumulative_incidence
) %>%
layout(xaxis = list(title = ""),
yaxis = list(title = "# Persons",
tickformat=",d"),
title="COVID-19 fitted vs observed possitive cases in Peru (molecular test model)" )
# plot the data
plot_ly(type = "scatter", mode = "lines") %>%
add_trace(x = ~Date, y = ~S,
line = list(color = "black"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Susceptible Projected: ", round(S), "<br>"),
showlegend = TRUE,
name = "Susceptible Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~cumulative_incident_cases,
mode = "marker",
marker = list(color = "blue"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Cases Observed: ", cumulative_incident_cases, "<br>"),
showlegend = TRUE,
name = "Cases Observed",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~Deaths_Total,
mode = "marker",
marker = list(color = "brown"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Deaths Observed: ", Deaths_Total, "<br>"),
showlegend = TRUE,
name = "Deaths Observed",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(I),
line = list(color = "red"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Infected Projected: ", round(I), "<br>"),
showlegend = TRUE,
name = "Infected Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(I*5),
line = list(color = "green"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Total Cases Projected: ", round(I*5), "<br>"),
showlegend = TRUE,
name = "Total Cases Projected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(R),
line = list(color = "orange"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Recovered Projected: ", round(R), "<br>"),
showlegend = TRUE,
name = "Recovered Projected",
data = fitted_cumulative_incidence
) %>%
layout(xaxis = list(title = ""),
yaxis = list(title = "Persons (log)", type = "log",
tickformat=",d"),
title="COVID-19 fitted (log) vs observed possitive cases in Peru (molecular test model)" )
# fitted_cumulative_incidence %>%
#   mutate(Deaths = round(I*0.2)) %>%
#   ggplot(aes(x=Date)) +
#   geom_line(aes(y=I, colour="red")) +
#   geom_line(aes(y=S, colour="black")) +
#   geom_line(aes(y=R, colour="green")) +
#   geom_line(aes(y=Deaths), colour="brown") +
#   geom_point(aes(y=cumulative_incident_cases, colour="blue")) +
#   scale_y_log10(labels = scales::comma) +
#   labs(y="Persons",
#        title="COVID-19 fitted vs observed cumulative incidence, Peru") +
#   scale_colour_manual(name = '',
#                       values =c('red' = 'red', 'black' = 'black', 'green' = 'green',
#                                 'brown' = 'brown', 'blue' = 'blue'),
#                       labels = c('Susceptible', 'Observed incidence', 'Recovered', 'Infectious', 'Deaths')) +
#   theme_bw() + theme(legend.position = "right")
library(caret)
library(readxl)
library(dplyr)
library(stringr)
library(rvest)
library(textreadr)
library(magrittr)
library(dplyr)
library(tidyverse)
COVID_19_Peru_Raw <- read_excel("data/COVID19_Peru.xlsx",
sheet = "Overall")
COVID_19_Peru_Raw_Inc2day <- read_excel("data/COVID19_Peru.xlsx",
sheet = "Increase_per_2_days")
# create an "other province cases since there's not data for other province per day"
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Other_province_cases_increase = Peru_cases_increase - Lima_cases_increase)
summary(COVID_19_Peru_Raw)
str(COVID_19_Peru_Raw)
summary(COVID_19_Peru_Raw_Inc2day)
str(COVID_19_Peru_Raw_Inc2day)
wikipedia_data_url <- paste("https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Peru",
sep = "")
outbreak_webpage <- textreadr::read_html(wikipedia_data_url)
# parse the web page and extract the data from the first
# table
COVID_19_Peru_Raw_Table1 <- outbreak_webpage %>% html_nodes("table") %>%
.[[2]] %>% html_table(fill = TRUE)
COVID19_Peru_Case_Region <- outbreak_webpage %>% html_nodes("table") %>%
.[[3]] %>% html_table(fill = TRUE)
COVID_19_Peru_Raw_Table1$Date <- as.Date(COVID_19_Peru_Raw_Table1$Date)
COVID_19_Peru_Raw_Table1 <- mutate_if(COVID_19_Peru_Raw_Table1,
is.character,
str_replace_all, pattern = " .*]", replacement = "")
COVID_19_Peru_Raw_Table1$
summary(COVID_19_Peru_Raw_Table1)
## Save dataset into rda folder
save(COVID_19_Peru_Raw, file = "rda/COVID_19_Peru_Raw.rda")
save(COVID_19_Peru_Raw_Inc2day, file = "rda/COVID_19_Peru_Raw_Inc2day.rda")
library(caret)
library(readxl)
library(dplyr)
library(stringr)
library(rvest)
library(textreadr)
library(magrittr)
library(dplyr)
library(tidyverse)
######################## Load COVID-19 data for Peru ###############################################
COVID_19_Peru_Raw <- read_excel("data/COVID19_Peru.xlsx",
sheet = "Overall")
COVID_19_Peru_Raw_Inc2day <- read_excel("data/COVID19_Peru.xlsx",
sheet = "Increase_per_2_days")
# create an "other province cases since there's not data for other province per day"
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Other_province_cases_increase = Peru_cases_increase - Lima_cases_increase)
summary(COVID_19_Peru_Raw)
str(COVID_19_Peru_Raw)
summary(COVID_19_Peru_Raw_Inc2day)
str(COVID_19_Peru_Raw_Inc2day)
############### Pulling data directly from wikipedia ##########################
# download the wikipedia web page we use a specific version
# of the template page directly version of the wikipedia page
wikipedia_data_url <- paste("https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Peru",
sep = "")
outbreak_webpage <- textreadr::read_html(wikipedia_data_url)
# parse the web page and extract the data from the first
# table
COVID_19_Peru_Raw_Table1 <- outbreak_webpage %>% html_nodes("table") %>%
.[[2]] %>% html_table(fill = TRUE)
COVID19_Peru_Case_Region <- outbreak_webpage %>% html_nodes("table") %>%
.[[3]] %>% html_table(fill = TRUE)
COVID_19_Peru_Raw_Table1$Date <- as.Date(COVID_19_Peru_Raw_Table1$Date)
# COVID_19_Peru_Raw_Table1$`Total Cases` <- gsub(" .*]", "", COVID_19_Peru_Raw_Table1$`Total Cases`)
# COVID_19_Peru_Raw_Table1$`Lima Cases` <- gsub(" .*]", "", COVID_19_Peru_Raw_Table1$`Lima Cases`)
COVID_19_Peru_Raw_Table1 <- mutate_if(COVID_19_Peru_Raw_Table1,
is.character,
str_replace_all, pattern = " .*]", replacement = "")
COVID_19_Peru_Raw_Table1$
summary(COVID_19_Peru_Raw_Table1)
## Save dataset into rda folder
save(COVID_19_Peru_Raw, file = "rda/COVID_19_Peru_Raw.rda")
save(COVID_19_Peru_Raw_Inc2day, file = "rda/COVID_19_Peru_Raw_Inc2day.rda")
#save(COVID19_Peru_Case_Region, file = "rda/COVID19_Peru_Case_Region.rda")
library(devtools)
install_github("holtzy/epuRate")
install.packages("covid19.analytics")
library(covid19.analytics)
ag <- covid19.data(case = "aggregated")
ag
report.summary(Nentries = 15, graphical.output = FALSE)
report.summary(Nentries = 15, graphical.output = TRUE)
epuRate::epurate()
?epuRate
?epuRate::epurate
session_info()
tsc <- covid19.data(case = 'ts-confirmed')
tots.per.location(tsc, geo.loc = "Peru")
growth.rate(tsc, geo.loc = "Peru")
totals.plt(tsa)
tsa <- covid19.data(case = 'ts-ALL')
totals.plt(tsa)
totals.plt(tsa, c("Peru"))
live.map(tsc)
report.summary(Nentries = 10, graphical.output = TRUE)
report.summary(Nentries = 5, graphical.output = TRUE)
install.packages("amsmath")
library(amsmath)
install.packages("amsmath")
# Chunk 1: setup
library(knitr)
library(rgl)
knit_hooks$set(webgl = hook_webgl)
knitr::opts_chunk$set(cache=FALSE, message = FALSE, warning = FALSE,
fig.align = "center")
# Chunk 2: style-customizations
h1.title {
font-size: 33px;
color: Navy;
font-family:"Roboto"
}
h1 {
font-size: 27px;
color: blue;
font-family:"Helvetica"
}
h2 {
font-size: 24px;
color: brown;
font-family:"Helvetica"
}
h3 {
font-size: 21px;
color: Navy;
font-family:"Helvetica"
}
h4 {
font-size: 18px;
color: black;
font-family:"Helvetica"
}
# Chunk 3: Libraries
load.libraries <- c('plyr', 'dplyr','data.table', 'tibble',
'stringr', 'stringi','forecast', 'tidyverse', 'broom','gt',
'caret','zoo','plotly','DT','tidyr', 'rvest', 'hrbrthemes',
'inspectdf','DataExplorer','ggplot2','tsoutliers', 'ggthemes',
'dlm','PerformanceAnalytics', 'projections', 'earlyR',
'ggdendro','rgdal','tsibble', 'EpiEstim','epitrix',
'distcrete','shadowtext','nCov2019','magrittr','incidence')
install.lib <- load.libraries[!load.libraries %in% installed.packages()]
for(libs in install.lib) install.packages(libs, dependences = TRUE)
sapply(load.libraries, require, character = TRUE)
library("corrplot")
library("RColorBrewer")
library(lubridate)
library(deSolve)
library(projections)
library(shadowtext)
library(covid19.analytics)
# Chunk 4: read Pooling Loss Data
#load raw data
## Load data
load("rda/COVID_19_Peru_Raw.rda")
load("rda/COVID_19_Peru_Raw_Inc2day.rda")
w <- load_nCov2019(lang = 'en')
df <- w['global']
d <- subset(df,time == time(w))
t10 <- d[order(d$cum_confirm,decreasing = T),]$country[1:25]
ww <- w['global'] %>%
as_tibble %>%
rename(possitive_cased_confirmed = cum_confirm) %>%
filter(possitive_cased_confirmed > 100 & !country == 'China') %>%
group_by(country) %>%
mutate(days_since_100th_case = as.numeric(time - min(time))) %>%
ungroup
ww <- ww[which(ww$country %in% t10),]
breaks=c(100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000)
p <- ggplot(ww, aes(days_since_100th_case,
possitive_cased_confirmed,
color = country,
group = 1,
text = paste('Country:', country,
'<br># possitive case confirmed: ', formatC(possitive_cased_confirmed, big.mark=","),
'<br># days after 100th case: ', days_since_100th_case ))) +
# geom_smooth(method='lm', aes(group=1),
#             data = . %>% filter(!country %in% c("Japan", "Singapore")),
#             color='grey10', linetype='dashed') +
geom_line(size = 0.8) +
geom_point(pch = 21, size = 1) +
scale_y_log10(expand = expansion(add = c(0,0.1)),
breaks = breaks, labels = breaks) +
scale_x_continuous(expand = expansion(add = c(0,1))) +
theme_minimal(base_size = 14) +
theme(
panel.grid.minor = element_blank(),
legend.position = "right",
plot.margin = ggplot2::margin(3,15,3,3,"mm")
) +
coord_cartesian(clip = "off") +
geom_shadowtext(aes(label = paste0(" ",country)), hjust=0, vjust = 0,
data = . %>%
group_by(country) %>%
top_n(1, days_since_100th_case),
bg.color = "white") +
labs(x = "Number of days since 100th case",
y = "# Possitive cases",
title = "Daily Lab-Confirmed Cases - Top 25 Countries")
ggplotly(p, tooltip = c("text"))
library('maps')
plot(w, palette = 'Blues')
report.summary(Nentries = 15,
graphical.output = FALSE)
?report.summary
report.summary(cases.to.process = "AGG",
Nentries = 15,
graphical.output = FALSE)
report.summary(cases.to.process = "AGG",
Nentries = 15,
graphical.output = FALSE,
graphical.output=TRUE)
report.summary(cases.to.process = "AGG",
Nentries = 15,
graphical.output = TRUE)
ag <- covid19.data(case = "aggregated")
?covid19.data
tsc <- covid19.data(case = "ts-confirmed")
tots.per.location(tsc, geo.loc = "Peru")
## Summary of COVID-19 Outbreak Peru
tots.per.location(tsc, geo.loc = "Peru")
tsa <- covid19.data(case = "ts-All")
totals.plt(tsa)
totals.plt(tsa, c('Peru')
totals.plt(tsa, c('Peru'))
totals.plt(tsa, c('Peru'))
growth.rate(ag, geo.loc = "Peru")
growth.rate(tsc, geo.loc = "Peru")
tots.per.location(tsc, geo.loc = "Peru")
growth.rate(tsa, geo.loc = "Peru")
tots.per.location(tsa, geo.loc = "Peru")
tots.per.location(tsc, geo.loc = "Peru")
growth.rate(tsa, geo.loc = "Peru")
growth.rate(tsc, geo.loc = "Peru")
tots.per.location(tsc, geo.loc = "Peru")
growth.rate(tsc, geo.loc = "Peru")
?report.summary
mtrends(tsc, geo.loc=c("Canada","Ontario","Uruguay","Italy"))
mtrends(tsc, geo.loc=c("Peru"))
itrends(tsc, geo.loc = c("Peru"), with.totals = TRUE)
# totals.plt(tsa, c('Peru'))
single.trend(tsa)
# totals.plt(tsa, c('Peru'))
single.trend(tsa)
# totals.plt(tsa, c('Peru'))
single.trend(tsc)
tots.per.location(tsc)
tots.per.location(tsc, geo.loc = "Peru")
totals.plt(tsa, c('Peru'))
## Summary of COVID-19 Outbreak Peru
tots.per.location(tsc, geo.loc = "Peru")
## Summary of COVID-19 Outbreak Peru
tots.per.location(tsc, geo.loc = "Peru")
totals.plt(tsa, c('Peru'))
tots.per.location(tsc, geo.loc = "Peru")
## Summary of COVID-19 Outbreak Peru
tots.per.location(tsc, geo.loc = "Peru")
## Summary of COVID-19 Outbreak Peru
tots.per.location(tsc, geo.loc = "Peru")
growth.rate(tsc, geo.loc = "Peru")
mtrends(tsc, geo.loc=c("Peru"))
totals.plt(tsa, c('Peru'))
single.trend(tsc)
itrends(tsc, geo.loc = c("Peru"), with.totals = TRUE)
tots.per.location(tsc, geo.loc = "Peru")
library(covid19.analytics)
growth.rate(tsc, geo.loc = "Peru")
Let's use data above to re-estimate $R_{e}$. Bayesian methods are used, and the trace output below is from the MCMC (Markov-chain Monte Carlo) resampling methods used.
```{r Cori_empirical_si_model_fit_Peru_daily, echo=FALSE, tidy=TRUE, message=FALSE, warning=FALSE}
SL=c(5,9,7,3,7,8,1,3,7,9,12)
totals.plt(tsa, c('Peru'))
totals.plt(tsa, c('Peru'))
tots.per.location(tsc, geo.loc = "Peru")
