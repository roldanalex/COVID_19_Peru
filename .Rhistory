font-family:"Helvetica"
}
# Chunk 3: Libraries
load.libraries <- c('plyr', 'dplyr','data.table', 'readxl',
'stringr', 'stringi','forecast',
'tidyverse','matrixStats','lubridate','e1071','xgboost',
'caret','zoo','plotly','DT','rpart','tidyr','inspectdf','DataExplorer',
'gridExtra','changepoint','ggfortify','magrittr','ggpmisc','prophet',
'ggplot2','tsoutliers','dlm','reshape2','AppliedPredictiveModeling',
'PerformanceAnalytics','NbClust','fpc','flexclust',
'ggdendro','rgdal','tsibble')
install.lib <- load.libraries[!load.libraries %in% installed.packages()]
for(libs in install.lib) install.packages(libs, dependences = TRUE)
sapply(load.libraries, require, character = TRUE)
library("corrplot")
library("Hmisc")
library("RColorBrewer")
library("dendextend")
library("feasts")
library("factoextra")
library(Boruta)
library(bounceR)
library(randomForest)
library(mlbench)
library(randomForestExplainer)
library(pdp)
library(gbm)
#Loading all the plotting functions
plotHist <- function(data_in, i) {
data <- data.frame(x=data_in[[i]])
p <- ggplot(data=data, aes(x=x)) + geom_histogram(bins=20, fill="#0072B2", alpha = .9) +
xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
plotCorr <- function(data_in, list1,list2,i){
data <- data.frame(x = data_in[[list1[i]]], y = data_in[[list2[i]]])
p <- ggplot(data, aes(x = x, y = y)) + geom_smooth(method = lm ) +
geom_point(aes(x = x, y = y)) +
geom_jitter(width = 0.1, height = 0.1)  +
xlab(paste0(list1[i], '\n', 'R-Squared: ',
round(cor(data_in[[list1[i]]],
data_in[[list2[i]]],
use = 'pairwise.complete.obs'), 3))) +
theme_light() + ylab(paste0(list2[i]))
return(suppressWarnings(p))
}
doPlotsCorr <- function(data_in, fun, list1,list2,ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, list1,list2,i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
doPlots <- function(data_in, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
# Chunk 4: read Pooling Loss Data
#load raw data
## Load data
load("rda/COVID_19_Peru_Raw.rda")
load("rda/COVID_19_Peru_Raw_Inc2day.rda")
# Chunk 5: Data cleaning
introduce(COVID_19_Peru_Raw)
introduce(COVID_19_Peru_Raw_Inc2day)
# Chunk 6: Peru_Cumulative_Incidence
COVID_19_Peru_Raw$Date <- as.Date(COVID_19_Peru_Raw$Date, format = "dd/MM/YY")
COVID_19_Peru_Raw_Inc2day$Date <- as.Date(COVID_19_Peru_Raw_Inc2day$Date, format = "dd/MM/YY")
Peru_Daily_Incident <- COVID_19_Peru_Raw %>%
pivot_longer(-Date, names_to="province",
values_to="incident_cases") %>%
filter(province %in% c("Lima_Cases", "Other_Province_Cases", "Total_Cases")) %>%
mutate(province=ordered(province, levels=c("Lima_Cases", "Other_Province_Cases", "Total_Cases")))
Peru_Cumulative_Incidence <- Peru_Daily_Incident %>%
group_by(province) %>%
arrange(Date) %>%
tidyr::replace_na(list(incident_cases = 0)) %>%
mutate(cumulative_incident_cases=cumsum(incident_cases)) %>%
mutate(cumulative_incident_cases = ifelse(cumulative_incident_cases == 0,
NA,
cumulative_incident_cases))
# Plot graph
a<- Peru_Cumulative_Incidence %>%
ggplot(aes(x = Date, y=cumulative_incident_cases)) + geom_point() + geom_line() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence",
title="Lab-confirmed possitive cases of COVID-19 in Peru, 2020",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(a)
# Chunk 1: setup
library(knitr)
library(rgl)
knit_hooks$set(webgl = hook_webgl)
knitr::opts_chunk$set(cache=FALSE, message = FALSE, warning = FALSE,
fig.align = "center")
# Chunk 2: style-customizations
h1.title {
font-size: 33px;
color: Navy;
font-family:"Roboto"
}
h1 {
font-size: 27px;
color: blue;
font-family:"Helvetica"
}
h2 {
font-size: 24px;
color: brown;
font-family:"Helvetica"
}
h3 {
font-size: 21px;
color: Navy;
font-family:"Helvetica"
}
h4 {
font-size: 18px;
color: black;
font-family:"Helvetica"
}
# Chunk 3: Libraries
load.libraries <- c('plyr', 'dplyr','data.table', 'readxl',
'stringr', 'stringi','forecast',
'tidyverse','matrixStats','lubridate','e1071','xgboost',
'caret','zoo','plotly','DT','rpart','tidyr','inspectdf','DataExplorer',
'gridExtra','changepoint','ggfortify','magrittr','ggpmisc','prophet',
'ggplot2','tsoutliers','dlm','reshape2','AppliedPredictiveModeling',
'PerformanceAnalytics','NbClust','fpc','flexclust',
'ggdendro','rgdal','tsibble')
install.lib <- load.libraries[!load.libraries %in% installed.packages()]
for(libs in install.lib) install.packages(libs, dependences = TRUE)
sapply(load.libraries, require, character = TRUE)
library("corrplot")
library("Hmisc")
library("RColorBrewer")
library("dendextend")
library("feasts")
library("factoextra")
library(Boruta)
library(bounceR)
library(randomForest)
library(mlbench)
library(randomForestExplainer)
library(pdp)
library(gbm)
#Loading all the plotting functions
plotHist <- function(data_in, i) {
data <- data.frame(x=data_in[[i]])
p <- ggplot(data=data, aes(x=x)) + geom_histogram(bins=20, fill="#0072B2", alpha = .9) +
xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
plotCorr <- function(data_in, list1,list2,i){
data <- data.frame(x = data_in[[list1[i]]], y = data_in[[list2[i]]])
p <- ggplot(data, aes(x = x, y = y)) + geom_smooth(method = lm ) +
geom_point(aes(x = x, y = y)) +
geom_jitter(width = 0.1, height = 0.1)  +
xlab(paste0(list1[i], '\n', 'R-Squared: ',
round(cor(data_in[[list1[i]]],
data_in[[list2[i]]],
use = 'pairwise.complete.obs'), 3))) +
theme_light() + ylab(paste0(list2[i]))
return(suppressWarnings(p))
}
doPlotsCorr <- function(data_in, fun, list1,list2,ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, list1,list2,i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
doPlots <- function(data_in, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
# Chunk 4: read Pooling Loss Data
#load raw data
## Load data
load("rda/COVID_19_Peru_Raw.rda")
load("rda/COVID_19_Peru_Raw_Inc2day.rda")
# Chunk 5: Data cleaning
introduce(COVID_19_Peru_Raw)
introduce(COVID_19_Peru_Raw_Inc2day)
# Chunk 6: Peru_Cumulative_Incidence
COVID_19_Peru_Raw$Date <- as.Date(COVID_19_Peru_Raw$Date, format = "dd/MM/YY")
COVID_19_Peru_Raw_Inc2day$Date <- as.Date(COVID_19_Peru_Raw_Inc2day$Date, format = "dd/MM/YY")
Peru_Daily_Incident <- COVID_19_Peru_Raw %>%
pivot_longer(-Date, names_to="province",
values_to="incident_cases") %>%
filter(province %in% c("Lima_Cases", "Other_Province_Cases", "Total_Cases")) %>%
mutate(province=ordered(province, levels=c("Lima_Cases", "Other_Province_Cases", "Total_Cases")))
Peru_Cumulative_Incidence <- Peru_Daily_Incident %>%
group_by(province) %>%
arrange(Date) %>%
tidyr::replace_na(list(incident_cases = 0)) %>%
mutate(cumulative_incident_cases=cumsum(incident_cases)) %>%
mutate(cumulative_incident_cases = ifelse(cumulative_incident_cases == 0,
NA,
cumulative_incident_cases))
# Plot graph
a<- Peru_Cumulative_Incidence %>%
ggplot(aes(x = Date, y=cumulative_incident_cases)) + geom_point() + geom_line() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence",
title="Lab-confirmed possitive cases of COVID-19 in Peru, 2020",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(a)
# Chunk 7: log_cumulative_incidence
x<- Peru_Cumulative_Incidence %>%
ggplot(aes(x=Date, y=cumulative_incident_cases)) + geom_point() + geom_line() +
scale_y_log10() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence (log10)",
title="Lab-confirmed possitive cases of COVID-19 in Peru, 2020",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(x)
# Chunk 8: Peru_Daily_Incident
b <- Peru_Daily_Incident %>%
ggplot(aes(x=Date, y=incident_cases))  + # geom_point() + geom_line() +
geom_bar(stat="identity") +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily incremental incidence",
title="Lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(b)
COVID_19_Peru_Raw
Peru_Daily_Deaths <- COVID_19_Peru_Raw %>%
pivot_longer(-Date, names_to="Country_Wide",
values_to="Deaths") %>%
filter(Country_Wide %in% c("Death_Daily"))
Peru_Daily_Deaths
COVID_19_Peru_Raw %>%
ifelse(deaths_in_confirmed_cases == 0, NA,
deaths_in_confirmed_cases)
COVID_19_Peru_Raw %>%
ifelse(Deaths_Total == 0, NA,
Deaths_Total)
COVID_19_Peru_Raw
COVID_19_Peru_Raw %>%
ifelse(Deaths_Total == 0, NA,
Deaths_Total)
COVID_19_Peru_Raw %>%
mutate(cumulative_deaths_in_confirmed_cases = ifelse(deaths_in_confirmed_cases == 0,
NA,
deaths_in_confirmed_cases))
COVID_19_Peru_Raw %>%
mutate(cumulative_deaths_in_confirmed_cases = ifelse(Deaths_Total == 0,
NA,
Deaths_Total))
COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(Deaths_Total == 0,
NA,
Deaths_Total))
COVID_19_Peru_Raw
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(Deaths_Total == 0,
NA,
Deaths_Total))
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(Deaths_Total == 0,
NA,
Deaths_Total)) %>%
mutate(Death_Daily = ifelse(Death_Daily == 0,
NA,
Death_Daily))
COVID_19_Peru_Raw
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(Deaths_Total == 0,
NA,
Deaths_Total)) %>%
mutate(Death_Daily = ifelse(Death_Daily == 0,
NA,
Death_Daily)) %>%
mutate(percent_death_increase_per_day = ifelse(percent_death_increase_per_day == 0,
NA,
percent_death_increase_per_day))
COVID_19_Peru_Raw
COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed cases of COVID-19 in China",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11))
COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed cases of COVID-19 in China",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11))
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(Deaths_Total == 0,
NA,
Deaths_Total)) %>%
mutate(Death_Daily = ifelse(Death_Daily == 0,
NA,
Death_Daily)) %>%
mutate(percent_death_increase_per_day = ifelse(percent_death_increase_per_day == 0,
NA,
percent_death_increase_per_day))
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total, fill = "blue")) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total, color + "green")) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total, color = "green")) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity", fill = "blue") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity", fill = "brown") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity", fill = "darkgrey") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) + # geom_point() + geom_line() +
geom_bar(stat="identity", fill = "darkblue") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
x<- Peru_Cumulative_Incidence %>%
ggplot(aes(x=Date, y=cumulative_incident_cases)) + geom_point() + geom_line() +
scale_y_log10() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence (log10)",
title="Lab-confirmed possitive cases of COVID-19 in Peru, 2020",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(x)
x<- Peru_Cumulative_Incidence %>%
ggplot(aes(x=Date, y=cumulative_incident_cases)) + geom_point(fill = "darkblue") + geom_line() +
scale_y_log10() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence (log10)",
title="Lab-confirmed possitive cases of COVID-19 in Peru, 2020",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(x)
x<- Peru_Cumulative_Incidence %>%
ggplot(aes(x=Date, y=cumulative_incident_cases)) + geom_point(color = "darkblue") + geom_line() +
scale_y_log10() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence (log10)",
title="Lab-confirmed possitive cases of COVID-19 in Peru, 2020",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(x)
COVID_19_Peru_Raw
COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Death_Daily)) + # geom_point() + geom_line() +
geom_bar(stat="identity") +
labs(y="Daily incremental deaths",
title="Daily deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11))
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) +
geom_bar(stat="identity", fill = "darkblue") +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
c <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) +
geom_bar(stat="identity", fill = "darkblue") +
scale_x_date(date_labels = "%d %b") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
e <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Death_Daily)) +
geom_bar(stat="identity", fill = "blue") +
scale_x_date(date_labels = "%d %b") +
labs(y="Daily incremental deaths",
title="Daily deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(e)
e <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Death_Daily)) +
geom_bar(stat="identity", fill = "darkblue") +
scale_x_date(date_labels = "%d %b") +
labs(y="Daily incremental deaths",
title="Daily deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(e)
Peru_Daily_Incident
Peru_Daily_Incident %>%
filter(province %in% c("Lima_Cases", "Total_Cases")) %>%
mutate(series="Lab-confirmed cases",
count=incident_cases) %>%
select(Date, province, series, count)
china_pops_webpage <- read_html("https://en.wikipedia.org/wiki/Demographics_of_Peru")
china_pops_webpage %>%
html_nodes("table")
china_pops_webpage
china_pops_webpage <- read_html("https://en.wikipedia.org/w/index.php?title=Demographics_of_Peru&action=edit")
china_pops_webpage
# wuhan_pops_webpage <- read_html("https://www.macrotrends.net/cities/20712/wuhan/population")
# wuhan_pops <- wuhan_pops_webpage %>%
#             html_nodes("table") %>%
#             .[[2]] %>%
#             html_table(fill = TRUE, header=FALSE) %>%
#             rename(year=X1, population=X2) %>%
#             mutate(population=rm_commas(population)) %>%
#             mutate_if(is.character, as.integer) %>%
#             filter(!is.na(year)) %>%
#             select(-X3)
N_Peru <- 31,237,385
# wuhan_pops_webpage <- read_html("https://www.macrotrends.net/cities/20712/wuhan/population")
# wuhan_pops <- wuhan_pops_webpage %>%
#             html_nodes("table") %>%
#             .[[2]] %>%
#             html_table(fill = TRUE, header=FALSE) %>%
#             rename(year=X1, population=X2) %>%
#             mutate(population=rm_commas(population)) %>%
#             mutate_if(is.character, as.integer) %>%
#             filter(!is.na(year)) %>%
#             select(-X3)
N_Peru <- c("31237385","11209103")
names(N_Peru) <- c("Peru_Population", "Lima_Population")
N_Peru
COVID_19_Peru_Raw
