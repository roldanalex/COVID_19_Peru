text = ~paste("Date: ", Date, "<br>",
"Infected: ", round(I), "<br>"),
showlegend = TRUE,
name = "Infected",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(I*0.02),
line = list(color = "green"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Deaths: ", round(I*0.02), "<br>"),
showlegend = TRUE,
name = "Deaths",
data = fitted_cumulative_incidence ) %>%
add_trace(x = ~Date, y = ~round(R),
line = list(color = "orange"),
hoverinfo = "text",
text = ~paste("Date: ", Date, "<br>",
"Recovered: ", round(R), "<br>"),
showlegend = TRUE,
name = "Recovered",
data = fitted_cumulative_incidence
) %>%
layout(xaxis = list(title = ""),
yaxis = list(title = "# Persons (log)", type = "log",
tickformat=",d"),
title="Peru COVID-19 - Fitted vs observed cumulative incidence at 20% ascertainment" )
fitted_cumulative_incidence %>%
ggplot(aes(x=Date)) + geom_line(aes(y=I, colour="red")) +
geom_line(aes(y=S, colour="black")) +
geom_line(aes(y=R, colour="green")) +
geom_point(aes(y=cumulative_incident_cases*5, colour="blue")) +
scale_y_log10(labels = scales::comma) +
labs(y="Persons (log10)",
title="Peru COVID-19 - Fitted vs observed cumulative incidence at 20% ascertainment") +
scale_colour_manual(name = '',
values =c('red'='red', 'black'='black', 'green'='green', 'blue'='blue'),
labels = c('Susceptible', 'Observed incidence', 'Recovered', 'Infectious')) +
theme_bw() + theme(legend.position = "right")
# create a vector of dates, in character form
# using the uncount() function.
library(incidence)
Peru_incidence_function_data <- COVID_19_Peru_Raw %>%
filter(Date <= ymd(Sys.Date())) %>%
mutate(Peru_cases_increase  = ifelse(is.na(Peru_cases_increase ), 0, Peru_cases_increase )) %>%
mutate(Date=format(Date, "%Y-%m-%d")) %>%
select(Date, Peru_cases_increase) %>%
uncount(Peru_cases_increase)
Peru_incidence_object <- incidence(Peru_incidence_function_data$Date)
Peru_incidence_object
Peru_incidence_peak <- find_peak(Peru_incidence_object)
plot(Peru_incidence_object) +
geom_vline(xintercept = Peru_incidence_peak, col = "red", lty = 2) +
labs(title="Daily number of lab-confirmed possitive cases in Peru",
subtitle = "(red line indicates date of peak incidence)") +
theme_bw()
# plot the incidence data and the model fit
plot(Peru_incidence_object) %>%
add_incidence_fit(Peru_incidence_fit) +
labs(title="Daily number of lab-confirmed possitive cases in Peru",
subtitle = "Observed VS Modeled") +
theme_bw()
Peru_incidence_function_data
Peru_incidence_function_data <- COVID_19_Peru_Raw %>%
filter(Date <= ymd(Sys.Date())) %>%
mutate(Peru_cases_increase  = ifelse(is.na(Peru_cases_increase ), 0, Peru_cases_increase )) %>%
mutate(Date=format(Date, "%Y-%m-%d")) %>%
select(Date, Peru_cases_increase) %>%
uncount(Peru_cases_increase)
tail(Peru_incidence_function_data)
Peru_incidence_peak <- find_peak(Peru_incidence_object)
plot(Peru_incidence_object) +
geom_vline(xintercept = Peru_incidence_peak, col = "red", lty = 2) +
labs(title="Daily number of lab-confirmed possitive cases in Peru",
subtitle = "(red line indicates date of peak incidence)") +
theme_bw()
Peru_incidence_fit <- incidence::fit(Peru_incidence_object,
split=Peru_incidence_peak)
# plot the incidence data and the model fit
plot(Peru_incidence_object) %>%
add_incidence_fit(Peru_incidence_fit) +
labs(title="Daily number of lab-confirmed possitive cases in Peru",
subtitle = "Observed VS Modeled") +
theme_bw()
# Due that the model doesn't show an statistical peak just yet
Peru_incidence_fit <- incidence::fit(Peru_incidence_object)
# plot the incidence data and the model fit
plot(Peru_incidence_object) %>%
add_incidence_fit(Peru_incidence_fit) +
labs(title="Daily number of lab-confirmed possitive cases in Peru",
subtitle = "Observed VS Modeled") +
theme_bw()
si_mean <- 5.0
si_sd <- 3.4
alt_si_mean <- 7.5
alt_si_sd <- 3.4
provincia <- "Peru_cases_increase"
last_date <- ymd(Sys.Date())
province_earlyR <- function(df, provincia, last_date, si_mean, si_sd) {
Peru_Cumulative_Incidence %>%
filter(Date <= last_date,
!is.na(incident_cases),
province == provincia) %>%
select(Date, incident_cases) %>%
uncount(incident_cases) %>%
pull(Date) -> local_case_dates
local_case_dates %>%
incidence(., last_date=last_date) -> local_cases
res <- get_R(local_cases, si_mean =si_mean, si_sd = si_sd)
res$local_case_dates <- local_case_dates
res$provincia <- provincia
res$last_date <- last_date
res$si_mean <- si_mean
res$si_sd <- si_sd
return(res)
}
province_plot_lambda <- function(res) {
plot(res, "lambdas", scale = length(res$local_case_dates) + 1,
bty="n")
title(sub=paste("\nEstimated", expression(lambda), "for",
res$provincia,
"(assuming serial interval mean =",
res$si_mean,
", sd =",
res$si_sd, ")"))
abline(v = res$local_case_dates, lwd = 3, col = "grey")
abline(v = res$last_date, col = "blue", lty = 2, lwd = 2)
points(res$local_case_dates, seq_along(res$local_case_dates), pch = 20, cex = 3)
}
lambda_plot_Peru <- function(provincia) {
res_obj <- province_earlyR(Peru_Cumulative_Incidence,
provincia,
last_date,
si_mean,
si_sd)
province_plot_lambda(res_obj)
}
lambda_plot_Peru(provincia)
growth_model_fit_stats <- glance(Peru_incidence_fit$model) %>%
mutate(Dates="all") %>%
select(Dates, r.squared, adj.r.squared, deviance)
end_date <- Sys.Date()
growth_model_fit_stats %>%
gt() %>%
tab_header(title = md("**Model Fitted Statistics**"),
subtitle = glue::glue("Last update on: {end_date}")) %>%
fmt_number(columns=2:4, decimals = 2) %>%
cols_label(Dates = md("**Dates**"),
r.squared = md("**R2**"),
adj.r.squared = md("**Adj. R2**"),
deviance = md("**Deviance**") )
mu <- 7.5 # days
sigma <- 3.4 # days
param <- gamma_mucv2shapescale(mu, sigma / mu)
w <- distcrete("gamma", interval = 1,
shape = param$shape,
scale = param$scale, w = 0)
growth_R0 <- lm2R0_sample(Peru_incidence_fit$model, w)
hist(growth_R0, col = "darkblue", border = "white", main = "R0 distribution in Peru")
summary(growth_R0)
Peru_confirmed_cases <- COVID_19_Peru_Raw %>%
mutate(Peru_Total_Cases = ifelse(is.na(Peru_Total_Cases),
0, Peru_Total_Cases)) %>%
mutate(I = ifelse(Date == ymd("2020-03-01"), 0, Peru_Total_Cases)) %>%
#  mutate(imported = ifelse(Date == ymd("2020-03-01"), Peru_Total_Cases, 0)) %>%
select(Date, I) %>%
rename(dates=Date)
plot_Ri <- function(estimate_R_obj) {
p_I <- plot(estimate_R_obj, "incid") # plots the incidence
p_SI <- plot(estimate_R_obj, "SI") # plots the serial interval distribution
p_Ri <- plot(estimate_R_obj, "R")
return(gridExtra::grid.arrange(p_I, p_SI, p_Ri, ncol = 1))
}
Peru_res_parametric_si <- estimate_R(Peru_confirmed_cases,
method="parametric_si",
config = make_config(list(
mean_si = 7.5,
std_si = 3.4)))
plot_Ri(Peru_res_parametric_si)
Peru_res_parametric_si <- estimate_R(Peru_confirmed_cases,
method="uncertain_si",
config = make_config(list(
mean_si = 7.5, std_mean_si = 2.0,
min_mean_si = 1, max_mean_si = 8.4,
std_si = 3.4, std_std_si = 1.0,
min_std_si = 0.5, max_std_si = 4.0,
n1 = 1000, n2 = 1000)))
plot_Ri(Peru_res_parametric_si)
SL=c(5,9,7,3,7,8,1,3,7,9,12)
si_data_wuhan_Li <- data.frame(EL=as.integer(rep(0,11)),
ER=as.integer(rep(1,11)),
SL=as.integer(SL),
SR=as.integer(SL+1))
## fixing the random seeds
MCMC_seed <- 1
overall_seed <- 2
mcmc_control <- make_mcmc_control(seed = MCMC_seed,
burnin = 1000)
dist <- "G" # fitting a Gamma distribution for the SI
empirical_si_config <- make_config(list(si_parametric_distr = dist,
mcmc_control = mcmc_control,
seed = overall_seed,
n1 = 50,
n2 = 50))
Peru_res_empirical_si <- estimate_R(Peru_confirmed_cases,
method = "si_from_data",
si_data = si_data_wuhan_Li,
config = empirical_si_config)
plot_Ri(Peru_res_empirical_si)
Peru_confirmed_cases
Peru_confirmed_cases$I
t_start <- seq(5, length(Peru_confirmed_cases$I)-1)
t_end <- t_start + 1
t_start
t_end
t_start <- seq(1, length(Peru_confirmed_cases$I)-1)
t_end <- t_start + 1
t_start
t_end
empirical_si_config_daily <- make_config(list(si_parametric_distr = dist,
mcmc_control = mcmc_control,
seed = overall_seed,
n1 = 50,
n2 = 50,
t_start = t_start,
t_end = t_end))
empirical_si_config_daily <- make_config(list(si_parametric_distr = dist,
mcmc_control = mcmc_control,
seed = overall_seed,
n1 = 50,
n2 = 50,
t_start = t_start,
t_end = t_end))
Peru_res_uncertain_si_daily <- estimate_R(Peru_confirmed_cases,
method = "si_from_data",
si_data = si_data_wuhan_Li,
config = empirical_si_config_daily)
t_start <- seq(2, length(Peru_confirmed_cases$I)-1)
t_end <- t_start + 1
empirical_si_config_daily <- make_config(list(si_parametric_distr = dist,
mcmc_control = mcmc_control,
seed = overall_seed,
n1 = 50,
n2 = 50,
t_start = t_start,
t_end = t_end))
Peru_res_uncertain_si_daily <- estimate_R(Peru_confirmed_cases,
method = "si_from_data",
si_data = si_data_wuhan_Li,
config = empirical_si_config_daily)
# plot_Ri(Peru_res_uncertain_si_daily)
plot(Peru_res_uncertain_si_daily, "R") +
scale_y_continuous(trans='log2') +
geom_hline(yintercept=1.0, linetype="solid", colour='red', size=0.5)
k <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date,
y=Peru_Total_Cases)) +
geom_point() +
geom_line() +
labs(y="Daily incremental incidence",
title="Peru lab-confirmed possitive cases") +
theme_bw()
ggplotly(k)
pred_fwd_days <- 10
#date_range <- 1:(which(get_dates(Peru_incidence_object) == Peru_incidence_peak) - pred_fwd_days)
date_range <- 1: (nrow(COVID_19_Peru_Raw)-pred_fwd_days)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = 20, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
pred_fwd_days <- 5
#date_range <- 1:(which(get_dates(Peru_incidence_object) == Peru_incidence_peak) - pred_fwd_days)
date_range <- 1: (nrow(COVID_19_Peru_Raw)-pred_fwd_days)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = 15, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
#date_range <- 1:(which(get_dates(Peru_incidence_object) == Peru_incidence_peak) - pred_fwd_days)
date_range <- 1: (nrow(COVID_19_Peru_Raw)-pred_fwd_days)
date_range
pred_fwd_days
pred_fwd_days <- 5
#date_range <- 1:(which(get_dates(Peru_incidence_object) == Peru_incidence_peak) - pred_fwd_days)
date_range <- 1: (nrow(COVID_19_Peru_Raw)-pred_fwd_days)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days+5, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days+10, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
pred_fwd_days <- 10
#date_range <- 1:(which(get_dates(Peru_incidence_object) == Peru_incidence_peak) - pred_fwd_days)
date_range <- 1: (nrow(COVID_19_Peru_Raw)-pred_fwd_days)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days+5, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
test_pred_growth <- projections::project(Peru_incidence_object[date_range],
R = median(growth_R0),
si = w,
n_days = pred_fwd_days+3, n_sim = 1000)
# convert the test_pred_growth matrix to a data frame and get the median
# incidence for all the simulations for each date
test_pred_growth_median_counts <- test_pred_growth %>%
as.data.frame() %>%
pivot_longer(-dates,
names_to="simulation",
values_to="incidence") %>%
group_by(dates) %>%
summarise(incident_cases=as.integer(median(incidence))) %>%
mutate(data_type = "projection")
l <- test_pred_growth_median_counts %>%
bind_rows(tibble(dates=get_dates(Peru_incidence_object),
incident_cases=get_counts(Peru_incidence_object),
data_type="observed")) %>%
ggplot(aes(x=dates, y=incident_cases, colour=data_type)) +
geom_point() +
geom_line() +
labs(x="", y="Daily incident confirmed cases",
title="Observed versus growth-phase projection of incident cases in Peru") +
theme(legend.position="top", legend.title = element_blank()) +
theme_bw()
ggplotly(l)
