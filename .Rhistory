# Chunk 3: read Data
#load raw data
## Load data
load("rda/COVID_19_Peru_Raw.rda")
w <- load_nCov2019(lang = 'en')
tsc <- covid19.data(case = "ts-confirmed")
tsa <- covid19.data(case = "ts-ALL")
# Chunk 4: Worldwide Analytics
df <- w['global']
d <- subset(df,time == time(w))
t10 <- d[order(d$cum_confirm,decreasing = T),]$country[1:15]
merged <- download_merged_data(cached = TRUE, silent = TRUE)
ww <- w['global'] %>%
as_tibble %>%
rename(possitive_cased_confirmed = cum_confirm) %>%
filter(possitive_cased_confirmed > 100 & !country == 'China') %>%
group_by(country) %>%
mutate(days_since_100th_case = as.numeric(time - min(time))) %>%
ungroup
ww <- ww[which(ww$country %in% t10),]
# breaks=c(100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000)
#
# p <- ggplot(ww, aes(days_since_100th_case,
#                     possitive_cased_confirmed,
#                     color = country,
#                     group = 1,
#                     text = paste('Country:', country,
#                                  '<br># possitive case confirmed: ', formatC(possitive_cased_confirmed, big.mark=","),
#                                  '<br># days after 100th case: ', days_since_100th_case ))) +
#   # geom_smooth(method='lm', aes(group=1),
#   #             data = . %>% filter(!country %in% c("Japan", "Singapore")),
#   #             color='grey10', linetype='dashed') +
#   geom_line(size = 0.8) +
#   geom_point(pch = 21, size = 1) +
#   scale_y_log10(expand = expansion(add = c(0,0.1)),
#                 breaks = breaks, labels = breaks) +
#   scale_x_continuous(expand = expansion(add = c(0,1))) +
#   theme_minimal(base_size = 14) +
#   theme(
#     panel.grid.minor = element_blank(),
#     legend.position = "right",
#     plot.margin = ggplot2::margin(3,15,3,3,"mm")
#   ) +
#   coord_cartesian(clip = "off") +
#   geom_shadowtext(aes(label = paste0(" ",country)), hjust=0, vjust = 0,
#                   data = . %>%
#                     group_by(country) %>%
#                     top_n(1, days_since_100th_case),
#                   bg.color = "white") +
#   labs(x = "Number of days since 100th case",
#        y = "# Possitive cases",
#        title = "Daily Lab-Confirmed Cases - Top 25 Countries")
#
# ggplotly(p, tooltip = c("text"))
Country.ID <- merged %>%
filter(country %in% t10) %>%
group_by(iso3c) %>%
select(iso3c) %>%
distinct() %>%
pull()
plot_covid19_spread(per_capita = TRUE,
per_capita_x_axis = TRUE,
population_cutoff = 10,
min_cases = 0.1,
highlight = Country.ID,
intervention = "lockdown",
type = "confirmed",
exclude_others = TRUE,
edate_cutoff = 100) +
labs(title = "First 100 Days: Reported confirmed cases - Top 15 Countries")
# Chunk 5: Geomap
library('maps')
plot(w, palette = 'Blues')
plot(w, palette = 'Blues')
df <- df[which(df$country %in% t10),]
d <- df
max_time <- max(d$time)
min_time <- max_time - 7
d <- na.omit(d[d$time >= min_time & d$time <= max_time,])
dd <- d[d$time == max(d$time, na.rm = TRUE),]
d$country <- factor(d$country,
levels=unique(dd$country[order(dd$cum_confirm)]))
breaks = c(10, 100, 1000, 10000)
p<-ggplot(d, aes(time, country)) +
geom_tile(aes(fill = cum_confirm), color = 'black') +
scale_fill_viridis_c(trans = 'log', breaks = breaks,
labels = breaks) +
xlab(NULL) + ylab(NULL) +
scale_x_date(date_labels = "%Y-%m-%d") +
ggtitle("Daily cumulatve cases for last 7 days in log scale (Top 25 countries)") +
theme_minimal()
ggplotly(p)
plot_covid19_stripes(
per_capita = TRUE,
population_cutoff = TRUE,
sort_countries = "magnitude"
)
plot_covid19_stripes()
map_covid19(merged, type = "confirmed", dates = unique(merged$date))
COVID_19_Peru_Raw$Date <- as.Date(COVID_19_Peru_Raw$Date, format = "dd/MM/YY")
COVID_19_Peru_Raw_Inc2day$Date <- as.Date(COVID_19_Peru_Raw_Inc2day$Date, format = "dd/MM/YY")
Peru_Daily_Incident <- COVID_19_Peru_Raw %>%
pivot_longer(-Date, names_to="province",
values_to = "incident_cases") %>%
filter(province %in% c("Lima_cases_increase",
"Other_province_cases_increase", "Peru_cases_increase")) %>%
mutate(province=ordered(province, c("Lima_cases_increase",
"Other_province_cases_increase", "Peru_cases_increase")))
Peru_Cumulative_Incidence <- Peru_Daily_Incident %>%
group_by(province) %>%
arrange(Date) %>%
tidyr::replace_na(list(incident_cases = 0)) %>%
mutate(cumulative_incident_cases = cumsum(incident_cases)) %>%
mutate(cumulative_incident_cases = ifelse(cumulative_incident_cases == 0,
NA,
cumulative_incident_cases))
# Plot graph
a<- Peru_Cumulative_Incidence %>%
ggplot(aes(x = Date, y=cumulative_incident_cases)) + geom_point(color = "darkblue") + geom_line() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence",
title="Lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(a)
b <- Peru_Cumulative_Incidence %>%
ggplot(aes(x=Date, y=cumulative_incident_cases)) + geom_point(color = "darkblue") + geom_line() +
scale_y_log10() +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily cumulative incidence (log10)",
title="Lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(b)
c <- Peru_Daily_Incident %>%
ggplot(aes(x=Date, y=incident_cases))  + # geom_point() + geom_line() +
geom_bar(stat="identity", fill = "darkblue") +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
facet_grid(province ~., scales="free_y") + labs(y="Daily incremental incidence",
title="Lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(c)
x <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=increase_index_case_percent_Peru,
text = paste('Date: ', Date,
'<br>Percentage (%):', round(increase_index_case_percent_Peru*100,1))))  + # geom_point() + geom_line() +
geom_bar(stat="identity",
fill = ifelse(COVID_19_Peru_Raw$increase_index_case_percent_Peru < 0, "darkred",
"darkblue")) +
scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
labs(y="% Index of possitive cases per day",
title="Index for Lab-confirmed possitive cases of COVID-19 in Peru")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw() +
scale_y_continuous(labels = scales::percent)
ggplotly(x,tooltip = c("text"))
plot_ly(x = ~COVID_19_Peru_Raw$Date,
y = ~COVID_19_Peru_Raw$percent_cases_increase_per_day_Peru,
type = "scatter",
mode = "markers+lines",
line = list(color = "blue"),
marker = list(color = "black"),
hoverinfo = 'text',
text = ~paste('</br> Date: ', COVID_19_Peru_Raw$Date,
'</br> Increase: ', paste(round(COVID_19_Peru_Raw$percent_cases_increase_per_day_Peru*100,1),
"%", sep="") )
) %>%
layout(title = "Percentage of Lab-confirmed possitive cases of COVID-19 in Peru
(Every 1 day)",
xaxis = list(title = "Date",
date_breaks="7 days", date_labels = "%d %b"),
#range = c(118,195)),
yaxis = list(title = "Incremental incidence every 1 day (%)",
tickformat = "%")
#range = c(10,30))
)
#
# z <- COVID_19_Peru_Raw %>%
#   ggplot(aes(x = Date,
#              y = percent_cases_increase_per_day_Peru,
#              text = paste('Date: ', Date,
#                           '<br>Percentage (%):', round(percent_cases_increase_per_day_Peru*100,1)))) +
#   geom_point() + geom_line() +
#   # geom_bar(stat="identity", fill = "darkblue") +
#   scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
#   labs(y="Incremental incidence every 1 day (%)",
#        title="Percentage of Lab-confirmed possitive cases of COVID-19 in Peru every 1 day")  +
#   theme(legend.position = "none",
#         strip.text.y = element_text(size=11)) + theme_bw() +
#   scale_y_continuous(labels = scales::percent)
#
# ggplotly(z, tooltip = c("text"))
# Change the 0 on deaths to NA
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Deaths_Total = ifelse(Deaths_Total == 0,
NA,
Deaths_Total)) %>%
mutate(Death_Daily = ifelse(Death_Daily == 0 & Date < ymd("2020-03-19"),
NA,
Death_Daily)) %>%
mutate(percent_death_increase_per_day = ifelse(percent_death_increase_per_day == 0 &
Date < ymd("2020-03-19"),
NA,
percent_death_increase_per_day))  %>%
mutate(`increase_index_death_percent)Peru` = ifelse(`increase_index_death_percent)Peru` == 0 &
Date < ymd("2020-03-19"),
NA,
`increase_index_death_percent)Peru`))
d <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Deaths_Total)) +
geom_bar(stat="identity", fill = "brown") +
scale_x_date(date_labels = "%d %b") +
labs(y="Daily cumulative deaths",
title="Cumulative deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales") +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(d)
e <- COVID_19_Peru_Raw %>%
ggplot(aes(x=Date, y=Death_Daily)) +
geom_bar(stat="identity", fill = "brown") +
scale_x_date(date_labels = "%d %b") +
labs(y="Daily incremental deaths",
title="Daily deaths in lab-confirmed possitive cases of COVID-19 in Peru",
caption="Note: varying y-axis scales")  +
theme(legend.position = "none",
strip.text.y = element_text(size=11)) + theme_bw()
ggplotly(e)
# y <- COVID_19_Peru_Raw %>%
#   # mutate(colorbars = ifelse(COVID_19_Peru_Raw$`increase_index_death_percent)Peru` > 0,
#                             # "darkred", "darkblue")) %>%
#   ggplot(aes(x=Date,
#              y=`increase_index_death_percent)Peru`,
#              text = paste('Date: ', Date,
#                           '<br>Percentage (%):', round(`increase_index_death_percent)Peru`*100,1)))) +
#   geom_bar(stat="identity",
#            fill = ifelse(COVID_19_Peru_Raw$`increase_index_death_percent)Peru` < 0, "darkred",
#                          "darkblue")) +
#   theme_bw() +
#   scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
#   labs(y="% Index of deaths per day",
#        title="Percentage Index for Death Lab-confirmed possitive cases of COVID-19 in Peru")  +
#   theme(legend.position = "none") +
#   scale_y_continuous(labels = scales::percent)
#
# y <- COVID_19_Peru_Raw %>%
#   ggplot(aes(x=Date, y=`increase_index_death_percent)Peru`,
#              fill = ifelse(`increase_index_death_percent)Peru` < 0, "darkred",
#                          "darkblue"),
#              text = paste('Date: ', Date,
#                           '<br>Percentage (%):', round(`increase_index_death_percent)Peru`*100,1)))) +
#     geom_bar(stat="identity") +
#     scale_x_date(date_breaks="7 days", date_labels = "%d %b") +
#     labs(y="Incremental deaths every 1 day (%)",
#          title="Percentage of Deaths for COVID-19 in Peru every 1 day")  +
#     theme_bw() +
#     theme(legend.position = "none",
#           strip.text.y = element_text(size=11))  +
#   scale_y_continuous(labels = scales::percent)
#
# ggplotly(y, tooltip = c("text"))
COVID_19_Peru_Raw %>%
filter(!is.na(`increase_index_death_percent)Peru`)) %>%
mutate(coloroption = ifelse(`increase_index_death_percent)Peru` < 0, "darkred",
"darkblue")) %>%
plot_ly(x = ~Date,
y = ~`increase_index_death_percent)Peru`,
type = "bar",
marker = list(color = ~coloroption)
#mode = "markers+lines",
# hoverinfo = 'text',
# text = ~paste('</br> Date: ', ~Date,
#               '</br> Increase: ', ~`increase_index_death_percent)Peru` )
) %>%
layout(title = "Index for deaths of COVID-19 in Peru",
xaxis = list(title = "Date",
date_breaks="7 days", date_labels = "%d %b"),
#range = c(118,195)),
yaxis = list(title = "% Index of deaths per day",
tickformat = "%")
#range = c(10,30))
)
mobility.google.data <- download_google_cmr_data(type = "country_region",
cached = TRUE, silent = TRUE)
peru_cities <- c("Lima", "Cusco", "Piura", "Loreto", "Lambayeque")
Peru.mobility.data.google <- mobility.google.data %>%
filter(iso3c == "PER") %>%
mutate(cities = ifelse(region %in% c("Callao Region", "Metropolitan Municipality of Lima",
"Lima Region"), "Lima", region)) %>%
filter(cities %in% peru_cities) %>%
select(-iso3c, -region, -timestamp) %>%
group_by(date, cities) %>%
summarise_all(mean)
ggplot(Peru.mobility.data.google,
aes(x = date, y = retail_recreation, color = cities)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR.",
title = "Peru Regions Movement Data - Retails Shopping & Recreational Areas"
) +
gghighlight(TRUE, label_key = cities)
ggplot(Peru.mobility.data.google,
aes(x = date, y = transit_stations, color = cities)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits to transit stations",
caption = "Movement data: Google CMR.",
title = "Peru Regions Movement Data - Transit Stations"
) +
gghighlight(TRUE, label_key = cities)
ggplot(Peru.mobility.data.google,
aes(x = date, y = residential, color = cities)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change on residential areas",
caption = "Movement data: Google CMR.",
title = "Peru Regions Movement Data - Residential Areas"
) +
gghighlight(TRUE, label_key = cities)
a <- df %>%
filter(npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0) %>%
filter(iso3c == "PER") %>%
ggplot(aes(x = date, fill = npi_type, weight = npi_measure,
text = paste('Date:', date,
'<br>Type of NPI: ', npi_type,
'<br>NPI Measure: ', npi_measure))) +
geom_histogram(position = "stack", binwidth = 7) +
theme_light() +
ylab("Count of NPI Measures") +
xlab("Month") +
ggtitle("Non-pharmaceutical Intervention - Peru") +
labs(fill = "Type of NPI")
NPI.Data <- download_oxford_npi_data(type = "measures", cached = TRUE)
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0
) %>%
filter(iso3c == "PER") %>%
datatable()
NPI.Plot <- NPI.Data %>%
filter(npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0) %>%
filter(iso3c == "PER") %>%
ggplot(aes(x = date, fill = npi_type, weight = npi_measure,
text = paste('Date:', date,
'<br>Type of NPI: ', npi_type,
'<br>NPI Measure: ', npi_measure))) +
geom_histogram(position = "stack", binwidth = 7) +
theme_light() +
ylab("Count of NPI Measures") +
xlab("Month") +
ggtitle("Non-pharmaceutical Intervention - Peru") +
labs(fill = "Type of NPI")
ggplotly(NPI.Plot, tooltip = c("text"))
# put the daily cumulative incidence numbers for Peru from
# 7th Mar to now into a vector called Infected
sir_start_date <- "2020-03-07"
Infected <- COVID_19_Peru_Raw %>%
filter(Date <= ymd("2020-04-11")) %>%
select(Peru_molecular_total) %>% pull(Peru_molecular_total)
COVID_19_Peru_Raw
#load raw data
## Load data
load("rda/COVID_19_Peru_Raw.rda")
COVID_19_Peru_Raw
############# Load COVID-19 data for Peru ###############################################
COVID_19_Peru_Raw <- read_excel("data/COVID19_Peru.xlsx",
sheet = "Overall")
COVID_19_Peru_Raw_Inc2day <- read_excel("data/COVID19_Peru.xlsx",
sheet = "Increase_per_2_days")
# create an "other province cases since there's not data for other province per day"
COVID_19_Peru_Raw <- COVID_19_Peru_Raw %>%
mutate(Other_province_cases_increase = Peru_cases_increase - Lima_cases_increase) %>%
mutate(Peru_serological_total = Peru_Total_Cases-Peru_molecular_total)
summary(COVID_19_Peru_Raw)
str(COVID_19_Peru_Raw)
summary(COVID_19_Peru_Raw_Inc2day)
str(COVID_19_Peru_Raw_Inc2day)
############### Pulling data directly from wikipedia ##########################
# download the wikipedia web page we use a specific version
# of the template page directly version of the wikipedia page
wikipedia_data_url <- paste("https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Peru",
sep = "")
outbreak_webpage <- textreadr::read_html(wikipedia_data_url)
# parse the web page and extract the data from the first
# table
COVID_19_Peru_Raw_Table1 <- outbreak_webpage %>% html_nodes("table") %>%
.[[2]] %>% html_table(fill = TRUE)
COVID19_Peru_Case_Region <- outbreak_webpage %>% html_nodes("table") %>%
.[[3]] %>% html_table(fill = TRUE)
COVID_19_Peru_Raw_Table1$Date <- as.Date(COVID_19_Peru_Raw_Table1$Date)
# COVID_19_Peru_Raw_Table1$`Total Cases` <- gsub(" .*]", "", COVID_19_Peru_Raw_Table1$`Total Cases`)
# COVID_19_Peru_Raw_Table1$`Lima Cases` <- gsub(" .*]", "", COVID_19_Peru_Raw_Table1$`Lima Cases`)
COVID_19_Peru_Raw_Table1 <- mutate_if(COVID_19_Peru_Raw_Table1,
is.character,
str_replace_all, pattern = " .*]", replacement = "")
COVID_19_Peru_Raw_Table1$
summary(COVID_19_Peru_Raw_Table1)
## Save dataset into rda folder
save(COVID_19_Peru_Raw, file = "rda/COVID_19_Peru_Raw.rda")
save(COVID_19_Peru_Raw_Inc2day, file = "rda/COVID_19_Peru_Raw_Inc2day.rda")
#save(COVID19_Peru_Case_Region, file = "rda/COVID19_Peru_Case_Region.rda")
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes)
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes) %>%
datatable()
NPI.Data <- download_oxford_npi_data(type = "measures", cached = TRUE)
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes) %>%
datatable()
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes) %>%
datatable(list(scrollX=TRUE))
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes) %>%
datatable(list(scrollX=TRUE))
NPI.Data <- download_oxford_npi_data(type = "measures", cached = TRUE)
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes) %>%
datatable(list(scrollX=TRUE))
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes)
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER")
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes)
NPI.Data %>% filter(
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(country, date, npi_type, npi_notes) %>%
datatable(list(scrollX=TRUE))
NPI.Data
npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(-iso3c, -country, -npi_measure, -npi_flag, -timestamp) %>%
datatable(list(scrollX=TRUE))
NPI.Data %>%
filter(npi_type != "Emergency investment in healthcare",
npi_type != "Investment in vaccines",
npi_measure != 0,
iso3c == "PER") %>%
select(-iso3c, -country, -npi_measure, -npi_flag, -timestamp) %>%
datatable(list(scrollX=TRUE))
library(tidyverse)
library(tidycovid19)
library(zoo)
df <- download_merged_data(cached = TRUE)
df %>%
filter(iso3c == "PER") %>%
mutate(
new_cases = confirmed - lag(confirmed),
ave_new_cases = rollmean(new_cases, 7, na.pad=TRUE, align="right")
) %>%
filter(!is.na(new_cases), !is.na(ave_new_cases)) %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = new_cases), stat = "identity", fill = "lightblue") +
geom_line(aes(y = ave_new_cases), color ="red") +
theme_minimal()
df
